package com.joyone.test.controller;

import com.joyone.test.entity.SfDocument;
import com.joyone.test.mapper.SfDocumentMapper;
import com.joyone.test.services.EmailService;
import com.joyone.test.services.FileTest;
import com.joyone.test.services.SFAccessTokenService;
import net.sf.json.JSONObject;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.methods.PostMethod;
import org.apache.commons.httpclient.methods.StringRequestEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import sun.misc.BASE64Decoder;

import javax.servlet.ServletOutputStream;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.io.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

import static org.springframework.web.bind.annotation.RequestMethod.GET;
import static org.springframework.web.bind.annotation.RequestMethod.POST;

@Controller
@RequestMapping(value="/test")
public class TestController {

    private String testStr=null;

    @Autowired
    private SFAccessTokenService sFAccessTokenService;

    @Autowired
    private SfDocumentMapper sfDocumentMapper;

    @Autowired
    private EmailService eEmailService;

    @Autowired
    private FileTest fileTest;

    @RequestMapping(method = GET)
    @ResponseBody
    public String test(HttpServletRequest request){
        String code = request.getParameter("code");
        if(code!=null){
            testStr = code;
        }
        if(testStr!=null){
            return testStr;
        }
        return "test success";
    }

    @RequestMapping(value="/testpost",method = POST)
    @ResponseBody
    public String testPost(HttpServletRequest request){
        String picStr = request.getParameter("picStr");
        try{
            if(picStr!=null){
                BASE64Decoder decoder = new BASE64Decoder();
                byte[] bytes = decoder.decodeBuffer(picStr);
                for (int i = 0; i < bytes.length; ++i) {
                    if (bytes[i] < 0) {// 调整异常数据
                        bytes[i] += 256;
                    }
                }
                OutputStream out = new FileOutputStream("/tmp/to.jpg");
                out.write(bytes);
                out.flush();
                out.close();
                //return "result:"+picStr;
            }
        }catch (Exception e){
            e.printStackTrace();
        }

        return "https://joytone.herokuapp.com/joytest/test/gettestpic";
    }


    @RequestMapping(value="/gettestpic",method = GET)
    @ResponseBody
    public void gettestpic(HttpServletRequest request,HttpServletResponse response){
        File file = new File("/tmp/to.jpg");
        InputStream inputStream = null;
        ServletOutputStream outputStream = null;
        try {
            inputStream = new FileInputStream(file);
            response.setHeader("Content-Type","image/jpeg");
            outputStream = response.getOutputStream();
            byte[] b = new byte[2048];
            int length;
            while ((length = inputStream.read(b)) > 0) {
                outputStream.write(b, 0, length);
            }
            outputStream.flush();
            outputStream.close();
            inputStream.close();
        } catch (IOException e) {
        } finally {

                try {
                    inputStream.close();
                    outputStream.close();
                } catch (IOException e) {
                }

        }
    }

//    public static void main(String[] args){
//       // String picStr = "/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/2wBDAQMDAwQDBAgEBAgQCwkLEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBD/wAARCAEgANgDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4 Tl5ufo6erx8vP09fb3 Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3 Pn6/9oADAMBAAIRAxEAPwD74BwMU7AUbyAQOvNeOn9p3wRb2r3Gq2c9kmP3Zd8 YewGB3rlNQ/bF8IJpl n2OW3uNjLb73B3n8qzhmGGkrxkmNNSaiecftp/Ee08Q6zbeANPYtDaMJbog8GRTkD8jXjfhKGxsottxFEhfhW3c1yniHxDdeJNeu9evpGea5lLNz0/wAinmKS6hTyrp0KjKnceK MzWrLGSab0PrcFRhSha2p0ni421rC5s5du1vm9TXNGVIhFJJbyy78HJUjFYEz30l3Kl1fSSKMnJJ61tWs88kY33BcKowmDxxXnUqHsY8jdzrVSMpWSN144NTkgdWZCq52hcimLYTOzFroKoJAOBxVbS9VgMfllgsi9ccYFLeaLfT27yW9/iFzuwM5z1rOHNBtXsVJ3WgraNpkPnLcXbSST5I2oM/pVe4tdJ05gba4km UkrIm3BxVG1eaxu5ElZmkIwrMC2KjvXufObIWXzBxgYxXTCMpS3M27K1jc8MQXF5m5Xykyf3ecZxWo9k8aSDUpXwoJHy1h6BbvZWkWoXF5tcthIxnC1q3txqWsXUVmk0b fJHCNq9dxA/rWbg510kylUUabTR9YfCLTrXSvgHHZRhh/blwZMgdVKDn9K3bXTI7SJFViAF7CodCtm0DwpoXhRsbNLskikGP WwyD laM9ztG QqqKucn0r4rjbHvEYxYaGvLp8zuyml7PD876srG2SIF3baHHJNZk95LA LYNIc4Gxd1Q3Rn8XOba3ujaWMJw0mSDJ9CK6XwxpEEEKQxSeb5Z5kI5/OjJeG3jIqpiHbyPPzTif6lU9jQs/MzdLtvEt2hlTToULMVBlcqSPXGOtT33hPxYV 0w6iquQcopBAP5Vb8ZaxLpt3oY0 8RlF4wnUHJ27D1/GodA8do/iq60qfIhYZVnPHQf419vT4ZwFOPK43PnZ8SY bvFo42HW/GGkXUlp4h0tgisQs0YLKy pOOK2bXWILpd0Lgg9ga9Junsru1dGWCeNsjBw1eWeKNDtdLnjuNOuFt5pHwsQ5Dc grw804XoyfNhXbyPTy/iyUZKGLX3FbxNBLqmlT29uQXUZA4rL CFxcab4gvPC oyFYdTRgQegbgDFauk6itzLJY3kDQXSfeU8bh61zXiX7V4Y1 11y0BxG4kwPY1ycO42rlWMVGeh9bjIUsywl4a3Pq7wPeSi1k0i9LCayYhQ3/ADzzhT Qrp5Oteb6Tr/9oWWleL7TlJkWK5CnqQoHP0Jr0dSssayo2VIyK/dqFWM4KS6n5hVg6dRxfQTBFJTyM008GrlNMgQ9KKD0orJgfCusWnhrxBpcSXpQpbukyY9V5r5z Jd9pn/CQyx2rbkz8oHRetaur JNV0rS5iJ2AJEYBbnJrhfstzcP51wu9n Yk89a/J8oy pg5XnJ8q2Lymn9bqKoug5JZo0E6RblCnBHJrWsNRL2ytJn5jgg8VBo7wMklrcsI/TinpJawO0chDIG U9K9iUlOVkfW0rr4jZ0WC1v7qaKSHzEXkDHFTajqL6PcNF/ZClCoCEZrIuL2OyikazZo5mB2BW6 /FVptV1V4FlvgcBcc965vZTlLmiXzxpx13NIWY1K8hu7fFmrDbKqHO4d tbskyadEkMaIIzkFt361yGl6sFjaSVurYABzXTwRQ6tYgzybYge3FZ1aHJL3y6cvafCR2t5EnmyrOrbW6jBNG/Tby/WeLB4wQeMms 90GGxmU2ErurjLLuzk1Y06O0sXZrhGL4yMVooJK8DTZ2kdOLC0htHllsIBFu67jXRfB/w5Za744gYogtrIGduf4lG5f5V57qfiZZrI2wJVF5xjrXonwGuHhiur6NsSTuqLkc4yQaVCHsVKrN7IxxFnBQju2fTzMtxHLe8H7SfM29wDWLqgbWrhdItnbanzSbfQc4/Gn6vqkGi6E19cybDBDmsH4fSXgeXVprgGS6bOH7L26 1fn2X4eeaYqeKq6 8VnuPeW4KNGO7M/xNqeoWepXWh6fbywW9np6TKEU43bwMV6r8O/C/i3xPpcUkk8mn2bqAWAG9vwIqjouir448ZR6dEkaxWsYlunUcumcbc/XFe96dLaaYkWmCNYVjUKmBwa/Ycjy5VYKtVR fwpOS5n1OT0n4J DbKU3d5afbbnqZJSQc/gatah8IvBV S0mlpG2PvLnP867jK5/DNIcV9OsHQ6o6FFJHk1/8Eo7E/aPDetXFuOpgwNrH3Jya8g8Vxaro/jTT7TXdPEYiBVJASVc7hg5r6tvryDT7drm4kCoozycVwmu6Fa/EPT557nTvLa3O 1lOMkjkfrXFistpVV7iszOVJOXMeQeJNF/tLTmv4i8VzAd8TIvNcl4j1Jtc0BVnh2yxHbIMcg816FLrVjp1nP/AGlN5ccDGBvlJ ZTg9K4fxEumy33mWMuYL5CRgYG7oK/NM7wC/jpe9Fnu8OZpPDVvq1R 6 h0XwB18T2974HvLrdCQZbXced5JLfyr37wddzPpf2GZw0lqdhJPJ718beGL Twh4ts9RZygWcqfoeK sLHU7Wx1e0uYXzb6rHvVh0DE4x lfccN4yOJwqTeqOrPsIqWI5o7NXO2pjnmjcCPl5FGAa kPnnoIM45opSRRSA/G/W9Q/4SO4lkjnPk23LAdGbqDVHTfEPySWc0BDEYVsdKbawLpyG2Ulufmx3q/Z6fatKXlQLuGQc18FOMeRRWyPey gqNGMdi7pOixPaw3ct3JuZuQwAHWjxP4Y 0W4ks5iZAeAOlSzXMKafAYH aJgcZznmqUHipr27a3MqIV4AI6msFCfMpx2R6snGMbSMFLPXrO9U3EshEY4K8itG4e5ugBcXe6Fh8yuQK6K2sr3zJJZwr7/AG4FYNxZ2dxfOktx5bL/AAk4raNfmnytHPKDiT6BFpSyoiqhUyhdznB/Cu0n0uNlW3gvXWBsEqMYrgLa00yGRi2oL8sgIUHn866lbieOw89SREv3STnNYY2MnJcpvh6kXF33KGsy31jeXFrYOrRDO12P3fYVn2st9PgHUpYmweUwcn8ararJqV k11lQjn5cHBpulRXukTqdQZGjkXKkc44rqp0eWGpi6rlM10u4ksza6gGkeH5ckff te7/AAc05o4bOJISucuVA/EV4touiz INYs7WNVIuXAX3Jr6v HlhaW0W KAblRUXHYgYNeLn J p5fNrdnVhKf1jExXRE3xTuprix0rQmi2tqE3k7h6YJ5/KuY8R32srGtvpSOn2fy93le2OvtxXR KrW91fxt4egkdY4kuByxwM4ata6tNOiv57eznikd1KPtIPUYrzOGqX xxlbdnzvF9eVPGKla6sesfszaSYfCtxrt5DGb68nbfICSSnBx detXlhFeQlGb5hyrdwa5H4Q6INC8HW9tG 4SYk656iu23ccjkV xYWHsqMUjx4STSSMKLWLjSpDaasGMY 5L2I96v3OtWUVo10kwcAZAU5zWP47vrS28O3kcjqLiaNlgB5Yt2wOtfMXwNt/jJpfj ebx8JU0EM4j8wlgc/d78V1x1G20z6OhsNU8YXS3usKYdPhb91b/APPT3IrrFgjiiWKOFQqjAA9KWF4pIVkt2Voz90r0xTixA461nLcpPQ V/HN7No2ueItLhsvtL26/awigkt5jkYx FcXplzqUmgWk2q6ZJayreJgOpHHPrXovis2cPxq15JpMLJplruBPQ7mrG8evpsukRpBOSY5lbg8cV8Dm7i3UijDDzUcTFrujnPGmiFoYL6EAnO7j3r1T4R6xJ4r8ITeG7q9Y6jp2DbMcblYDjH51ztpawalpkIddwWMdfpXAR NpfhX44g1rY4tJH2TqBxgnr lfLcIZq6GKdCT0ufpea4b63heaO6PqbRPiPoP2VbLVruO3vrc VIrthiRxu59cZrrE1CyktVvY7mMwuMh88V88fFXSbLU7O1 J3hlhNb3kSC5WM5C/KOcDvk815yvjfxeYoNH07U2k0yTDOQSGXtjOa/QcXxAsBVca0fdtoz84nP2crSPr8eINHml2RalbsxOAA/eivki4vbi2hW5sr 5WRDuyZSeaK4qPGNCpG7jYlVo9T5R OHgzX/CvjfVjoWnTQ6YswEGxflAI5A/HNeYvr rx5SYMSvBDetfa3inXNM8T3jR6jbLPb2z7wqLgtjnk45rhY/g9F4q1veuifZ7G7ZmRgnQcnsPpXzGV53Tp4eMMStVvc9nD4iNefLFnznpnidViEdxCnXnb1xVhBoX25LvzCB94h8DBr0/WPhHodlqFzprRukkD4L5ODXLa/wDDT7PkaVOHOOQwz/Ovcp5hhMQ VOyPfeAxLgppX ZoaB4nt9QglsIJo3ZVPlknmszW/DE2oATvCwmPG9RXK/8ACEeLNNmN5b2zkDn923P5CpU8S JbJxHdeagXtJGf61bpQUuajJMxcqifLVi9AuPC9/Z5VIj8nzM1aunanrslolpKQbYNtYAnOM1hXXizUXl/euCrnkYwSK6Ky8Y6MlssVxYtGVAO4Hr laVI1HHa7MFy8zadit4nZdMuUijfEDrnAqpZ3ct 4W3Zwi4BxWrqniDw/r8PkoqqwXAJOKi0M2VsotbLbJNM4QAHPJOBWsYzlD3lqJtKV09D1T4PaULi9l1bdIfsCbIMjrcA9B FfU3huxWw09AIDFuwxYjBJPJryD4Y6MugLY GLtFW7KrqdwccrKflKn/CvaIZ5SuxnBGOBX5vxnjeeccJDpqz6LJ6Huyqrqcr46 x/wDCS6DBLeACS4GCT0O01zmkrcaJ43tLUwRm32ylpBn94T0zUHxiW4hNnqcOSYH3Aj E4NbCarZf2Vaak 2WR1VUI67uBjP1r6Xg2isTgkux8XxxGphq0KrWjR9TfDfxNZy GZ3lxELHO5ewUY5r5A J/wC2x4u0n4otH4bn36HZSeXLCGO2QZGT GDXb6L4l8Tax4b1jT9I22z3YOnszEfu2BBzmvPvD/7A3i3Vbw3niPX4/s87mQ7VOTk56g1 p4NwlC03sfO06lSdOLgtT6e C3iPR/jFbJ8Qru S9kU7YbTdlbbHf1B5xXrt1Z2d9bSWNzaxvDIMFSO1eZ/A/wCBmjfBPSZtO0m6mmNyMyF5GIzkHgHp0r1AMFHNXKyfunbF8y13OCa317wLK7Wksl9pRYt5TctCvooHYcV0 meJdH1C1S4W8QB8AhjyD6Voz XIpjdA4YYIIzXxN 1qnxL8P JYpvBryx2PMuyB8HIPHyg5qXoiJPl3Os1zS7nX/HfiLxVGs0sMifYYgBkbombp ded6HLqc4u9J1QSq63iokcvGBitHwF8R7q88DWcWvltPvLm4kibepVi4Ayx781rx6Tpn9vWtvZ3ZuJWYTTPktyD/hX53ndZU4VZ Qstouvi4xXc9D0rTY7PToo1YZ2AHH0rl/EHw7m ItxLptlEGEJ2yM44/wA811DuYIHdSWCLTPAN14yi1C51C28POLW5PySNIPbnH4V c8L4eWKxvProfpWZYl4elyx3Z5r8MvGN/wDDSw1LwD4lCahpwlnCJksyZJ7cV5ovjq103xDdR2Uf gGQ WjdVX0rb8RwTXHjfVbfUJxDdZdivQAEnFcvo/gBru7e4vp90BbhlPWvt8RjPrEPYYhXSPyjH16tSdrFjRPGur6nqEgnJW0DNlQeAM8UVmT B9R0ya7Camq264ZfU5/Giub6vh6iTp7HE41U9zX03V/7J1S4sLuHyZ4WCyJLxgkZwa9 8AaxZX jfYw6CUodpB4GRUvi34V6VrxvmtLVEmuXEjygc/KMV5xp3g7xFpN5KsMzxQWvyk5PIBxXwVfGYfNqSdOXLJH0SoVMvqKSV0c54m8OXGn KTp17dxXZvQ0pfOSpBwAao6l4GWOQM0WFYD7or0rxR/Zg0O3ENs8l3KQDcYJ28nOT2qlcW0lxYpbINziIfMe/Fd2Hx9RRTfTQ/SsgxbxVJ860R5yvhSW2lUWoCsRlfU1m3OgafqGponiHTIJ1GQd4zXV3OkatFiRlf5T13dKynt57iUkIzsp5IBNerSxc/5j6CVClV1aOT8RfDPwHM7NFp0EBU/eiUZxXAeJPhjYsxXRb2TG0cNjA49q9vj0guryOQWzhkfggfjUg8N6SZFkmYAHGQK9Chm9WhJScro4q T4asnzRPmzS/gf431t3XR9Ma8KDcTGpNavgn4YeOPCXjKxn1vw1deQsoJVozjcDwfzr6y8L6zpfw 1IahZ263VrLbeW8eeQc9a78/Ezw99kt75vD5BklUAta7xyRnnFe/hs niJ2toz5HGZVDDt8qsjlpNDuF1ez1iy0ia4vNRiEtzhckMTyK39BvkuZ5ll0945rf5WSQdM16Nf/GTwVpAjtpNJkSaQYiJtCMn0BxXmln9qv8AU7zVTE0Ium3Ig9K T4wwuHiva837x9D0skr1Ix9lb3TP8d6HHq lzqkfLA8AdK4Hw1b22o Hr3Qnklt7zT1eSJhgMCAWBH5CvYrZYSrxXYOH4PFeYeM/CF1pl6dc0CaTep ZQpw47g1xcI52sDV9lN2iw4lyr 1sK4R3WqKHwp1bVzb6joV9cGeIA3huCcsZiQCD FfQHwz N0WnwLo/ii Vli4jnLc49DXjXgbV/D siTTbxF0y/bl1YbQx vFWdd8BTWOv2TaYzzLKjFmySnUfhX7Th8RFpOm7pn45P61l9VqpF6H19p3jLw7qkAubTVIXRh13UmoeL/D1jEZbjVIFA/2utfNdt4X1S3gMayzIpXd8khx lcDF4qig8WSW2qfbZLW0fYSWfbu4xXZPFNaJHVSzN1XypWPoPxX8dL43LaV4I0aW9ucf68rmNfxBrx3xF4u8RWfiqKXX7Oa7uboEGVxkR5I4Brs7bxJp6kHT7dEEiBg23GQa81 JviSS4u1t0vomJORGiAvn6jkVwYrGqMXKTsgh7TGTUI3Yvxf8Brqmk2esQ6jPbXbsDFFGQNxwP8a6n4a Dm0awS5vJ2lupsFy3UcVjeG4NV8QQ2VzqRdhZ/6pSOOmOa9DsTcQrgRgcjivxTifPZYhvDUXonr5n6ZkeS/UKftKq957Fu/idbOZYVBcrxjrU/hTx94jns7Xwtp..";
//        String picStr ="";
//        try{
//            if(picStr!=null){
//                BASE64Decoder decoder = new BASE64Decoder();
//                byte[] bytes = decoder.decodeBuffer(picStr);
//                for (int i = 0; i < bytes.length; ++i) {
//                    if (bytes[i] < 0) {// 调整异常数据
//                        bytes[i] += 256;
//                    }
//                }
//                OutputStream out = new FileOutputStream("C:/erer.jpg");
//                out.write(bytes);
//                out.flush();
//                out.close();
//                //return "result:"+picStr;
//            }
//        }catch (Exception e){
//                e.printStackTrace();
//            }
//
//    }
    @RequestMapping(value="index",method = GET)
    public String testPage(){
        System.out.println("aaC1122..");
        return "test/index";
    }

    @RequestMapping(value="updemo",method = GET)
    public String testPageDemo(){
        System.out.println("aaC1122..");
        return "test/updemo";
    }

    @RequestMapping(value="createfile",method = GET)
    @ResponseBody
    public String createFile(){
        fileTest.createFile();
        fileTest.writeTxt();
        return "createOK";
    }

    @RequestMapping(value="readfile",method = GET)
    @ResponseBody
    public String readFile(){
        return fileTest.readTxt();
    }

    @RequestMapping(value="nowtime",method = GET)
    @ResponseBody
    public String nowTime(){
        DateFormat format = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        String time = format.format(new Date());
        Calendar cal = Calendar.getInstance();
        TimeZone timeZone = cal.getTimeZone();
        return time+"   "+timeZone;
    }

    @RequestMapping(value="/uploddemo",method = POST)
    @ResponseBody
    public String updatePicBySsdf(@RequestParam(value = "images") MultipartFile uploadFile){
        System.out.println("update...");
        try {
            String fileName = uploadFile.getOriginalFilename();
            String type= fileName.substring(fileName.lastIndexOf("."),fileName.length());
            System.out.println("fileNameAAA=="+fileName);
            System.out.println("typeVVV=="+type);
            if (!uploadFile.isEmpty()) {
                eEmailService.sendEmail("AAA","BBB");
                try {
                    String newfileName = "rty.jpg";
                    byte[] bytes = uploadFile.getBytes();
                    BufferedOutputStream buffStream =
                            new BufferedOutputStream(new FileOutputStream(new File("F:/jar/" + newfileName)));
                    buffStream.write(bytes);
                    buffStream.close();
                } catch (Exception e) {
                    e.printStackTrace();
                    return "You failed to upload " + fileName + ": " + e.getMessage();
                }
            } else {
                return "Unable to upload. File is empty.";
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
        return "OK";
    }

    @RequestMapping(value="refresh",method = GET)
    @ResponseBody
    public String refreshToken(){
        sFAccessTokenService.refreshAccessToken();
        return "refresh OK";
    }

    /**
     * 直接读取映射过来的Document获取Body来显示图片
     * @param id
     * @param response
     * @return
     * @throws IOException
     */
    @ResponseBody
    @RequestMapping(value="/getdupic",method = GET)
    public String getPicFromDocument(@RequestParam(value = "id",required = false)String id, ServletResponse response) throws IOException{
        String reId= "0157F000000HxpXQAS";
        if(id!=null){
            reId = id;
        }
        SfDocument document = sfDocumentMapper.getSfDocument(reId);
        System.out.println("sfid=="+document.getSfid());
        System.out.println("name=="+document.getName());
        System.out.println("type=="+document.getType());
        byte[] picByte = document.getBody();
        System.out.println("size=="+picByte.length);
        ServletOutputStream outputStream = null;
        BASE64Decoder decoder = new BASE64Decoder();
        try {

            outputStream = response.getOutputStream();
            byte[] b = decoder.decodeBuffer(new String(picByte));
            outputStream.write(b);
            outputStream.flush();
        } catch (IOException e) {
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                }
            }

        }

        return null;
    }

    /**
     * 获取图片，调用SF的自定义Rest api来获取
     * @param response
     * @return
     * @throws IOException
     */
    @ResponseBody
    @RequestMapping(value="/getPicFromSf/{id}",method = GET)
    public String getPicFromDocumentApi(@PathVariable(value = "id")String id, ServletResponse response) throws IOException{
        HttpClient httpclient = new HttpClient();
        String accessToken=sFAccessTokenService.getAccessToken();
        JSONObject content = new JSONObject();
        content.put("id", id);
        PostMethod post = new PostMethod("https://ap5.salesforce.com/services/apexrest/rest");
        post.addRequestHeader("Authorization", "OAuth "+accessToken);
        post.setRequestEntity(new StringRequestEntity(content.toString(),"application/json", null));
        int returnCode = httpclient.executeMethod(post);
        //System.out.println("returnCode " + returnCode);
        //System.out.println(post.getResponseBodyAsString());
        String picStr = post.getResponseBodyAsString();
        picStr=picStr.replace("\"","");
        BASE64Decoder decoder = new BASE64Decoder();
        ServletOutputStream outputStream = null;
        try {

            outputStream = response.getOutputStream();
            byte[] b = decoder.decodeBuffer(picStr);
            outputStream.write(b);
            outputStream.flush();
        } catch (IOException e) {
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                }
            }

        }

        return null;
    }

    /**
     * 查看SF的User表里的头像
     * @param response
     * @return
     * @throws IOException
     */
    @ResponseBody
    @RequestMapping(value="/getpic",method = GET)
    public String getPic(ServletResponse response) throws IOException {
        response.setContentType("image/" + "png");

        HttpClient httpclient = new HttpClient();
        String accessToken=sFAccessTokenService.getAccessToken();
        GetMethod post = new GetMethod("https://c.ap5.content.force.com/profilephoto/7297F000000L4NQ/T/1");
        post.addRequestHeader("Authorization", "OAuth "+accessToken);
        int returnCode = httpclient.executeMethod(post);
        System.out.println("returnCode " + returnCode);
        System.out.println(post.getResponseBodyAsString());
        InputStream is = post.getResponseBodyAsStream();

        ServletOutputStream outputStream = null;
        try {
            outputStream = response.getOutputStream();
            byte[] buffer = new byte[10000];
            int i = -1;
            while ((i = is.read(buffer)) != -1) {
                outputStream.write(buffer, 0, i);
            }

            outputStream.flush();
        } catch (IOException e) {
        } finally {
            if (outputStream != null) {
                try {
                    outputStream.close();
                } catch (IOException e) {
                }
            }
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                }
            }
        }

        return null;
    }

    /**
     * 直接更新映射过来的Document,但是有问题
     *
     * @param uploadFile
     * @return
     */
    @RequestMapping(value="/updatePic",method = POST)
    public String updatePic(@RequestParam(value = "uploadFile") MultipartFile uploadFile){
        System.out.println("update...");
        try {
            String fileName = uploadFile.getOriginalFilename();
            String type= fileName.substring(fileName.lastIndexOf("."),fileName.length());
            System.out.println("fileName=="+fileName);
            System.out.println("type=="+type);
            InputStream is=uploadFile.getInputStream();
            byte[] fileByte = null;
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] b = new byte[1024];
            int n;
            while ((n = is.read(b)) != -1){
                bos.write(b, 0, n);
            }
            is.close();
            bos.close();
            fileByte = bos.toByteArray();
            String fileStr = new String(Base64.encodeBase64(fileByte));
            Map<String,Object> paramMap = new HashMap<String,Object>();
            paramMap.put("name",fileName);
            paramMap.put("type",type);
            paramMap.put("body",fileStr.getBytes());
            paramMap.put("sfid","0157F000000HxpXQAS");
            sfDocumentMapper.updateDocument(paramMap);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "redirect:/test/getdupic";
    }

    /**
     * 通过SF现有接口，更新文件
     * @param uploadFile
     * @return
     */
    @RequestMapping(value="/updatePicSf",method = POST)
    public String updatePicBySf(@RequestParam(value = "uploadFile") MultipartFile uploadFile,@RequestParam(value = "documentSfId") String documentSfId){
        System.out.println("update...");
        System.out.println("documentSfId=="+documentSfId);
        try {
            String fileName = uploadFile.getOriginalFilename();
            String type= fileName.substring(fileName.lastIndexOf("."),fileName.length());
            System.out.println("fileName=="+fileName);
            System.out.println("type=="+type);
            InputStream is=uploadFile.getInputStream();
            byte[] fileByte = null;
            ByteArrayOutputStream bos = new ByteArrayOutputStream();
            byte[] b = new byte[1024];
            int n;
            while ((n = is.read(b)) != -1){
                bos.write(b, 0, n);
            }
            is.close();
            bos.close();
            fileByte = bos.toByteArray();
            String fileStr = new String(Base64.encodeBase64(fileByte));

            JSONObject content = new JSONObject();
            content.put("Body", fileStr);
            content.put("FolderId", "0057F000000ebtGQAQ");
            content.put("Name", "pi");
            content.put("Type", "png");
            HttpClient httpclient = new HttpClient();
            String accessToken= sFAccessTokenService.getAccessToken();
            PostMethod post = new PostMethod("https://ap5.salesforce.com/services/data/v23.0/sobjects/Document/"+documentSfId){
                @Override
                public String getName() { return "PATCH"; }
            }
                    ;
            post.addRequestHeader("Authorization", "OAuth "+accessToken);
            post.setRequestEntity(new StringRequestEntity(content.toString(),"application/json", null));
            int returnCode = httpclient.executeMethod(post);

            System.out.println("returnCode " + returnCode);
            System.out.println(post.getResponseBodyAsString());
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "redirect:/test/getPicFromSf/"+documentSfId;
    }

}